// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ProductsContainer component should render ProductsContainer 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ProductDetails
    addItemToCartSuccess={[MockFunction]}
    color="green"
    failed={null}
    gender="male"
    product={
      Object {
        "brand": "randombrand",
        "discreption": "randomdisc",
        "title": "random",
      }
    }
    size="l"
    success={false}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <h2
          className="title"
        >
          Random
        </h2>,
        <p
          className="brand"
        >
          Brand: 
          <span>
            randombrand
          </span>
        </p>,
        <div
          className="priceContainer"
        >
          <span
            className="price"
          >
            Price: 
            <span
              className="priceNumber"
            >
              $
            </span>
          </span>
          <Connect(AddToCartButton)
            addItemToCartSuccess={[MockFunction]}
            item={
              Object {
                "brand": "randombrand",
                "discreption": "randomdisc",
                "title": "random",
              }
            }
            options={
              Object {
                "color": "green",
                "gender": "male",
                "size": "l",
              }
            }
          />
        </div>,
        <div
          className="discreptionContainer"
        >
          <p
            className="discreptionText"
          >
            randomdisc
          </p>
        </div>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Random",
          "className": "title",
        },
        "ref": null,
        "rendered": "Random",
        "type": "h2",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            "Brand: ",
            <span>
              randombrand
            </span>,
          ],
          "className": "brand",
        },
        "ref": null,
        "rendered": Array [
          "Brand: ",
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "randombrand",
            },
            "ref": null,
            "rendered": "randombrand",
            "type": "span",
          },
        ],
        "type": "p",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <span
              className="price"
            >
              Price: 
              <span
                className="priceNumber"
              >
                $
              </span>
            </span>,
            <Connect(AddToCartButton)
              addItemToCartSuccess={[MockFunction]}
              item={
                Object {
                  "brand": "randombrand",
                  "discreption": "randomdisc",
                  "title": "random",
                }
              }
              options={
                Object {
                  "color": "green",
                  "gender": "male",
                  "size": "l",
                }
              }
            />,
          ],
          "className": "priceContainer",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                "Price: ",
                <span
                  className="priceNumber"
                >
                  $
                </span>,
              ],
              "className": "price",
            },
            "ref": null,
            "rendered": Array [
              "Price: ",
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    "$",
                    undefined,
                  ],
                  "className": "priceNumber",
                },
                "ref": null,
                "rendered": Array [
                  "$",
                  undefined,
                ],
                "type": "span",
              },
            ],
            "type": "span",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "addItemToCartSuccess": [MockFunction],
              "item": Object {
                "brand": "randombrand",
                "discreption": "randomdisc",
                "title": "random",
              },
              "options": Object {
                "color": "green",
                "gender": "male",
                "size": "l",
              },
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <p
            className="discreptionText"
          >
            randomdisc
          </p>,
          "className": "discreptionContainer",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "randomdisc",
            "className": "discreptionText",
          },
          "ref": null,
          "rendered": "randomdisc",
          "type": "p",
        },
        "type": "div",
      },
    ],
    "type": Symbol(react.fragment),
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <h2
            className="title"
          >
            Random
          </h2>,
          <p
            className="brand"
          >
            Brand: 
            <span>
              randombrand
            </span>
          </p>,
          <div
            className="priceContainer"
          >
            <span
              className="price"
            >
              Price: 
              <span
                className="priceNumber"
              >
                $
              </span>
            </span>
            <Connect(AddToCartButton)
              addItemToCartSuccess={[MockFunction]}
              item={
                Object {
                  "brand": "randombrand",
                  "discreption": "randomdisc",
                  "title": "random",
                }
              }
              options={
                Object {
                  "color": "green",
                  "gender": "male",
                  "size": "l",
                }
              }
            />
          </div>,
          <div
            className="discreptionContainer"
          >
            <p
              className="discreptionText"
            >
              randomdisc
            </p>
          </div>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Random",
            "className": "title",
          },
          "ref": null,
          "rendered": "Random",
          "type": "h2",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              "Brand: ",
              <span>
                randombrand
              </span>,
            ],
            "className": "brand",
          },
          "ref": null,
          "rendered": Array [
            "Brand: ",
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "randombrand",
              },
              "ref": null,
              "rendered": "randombrand",
              "type": "span",
            },
          ],
          "type": "p",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <span
                className="price"
              >
                Price: 
                <span
                  className="priceNumber"
                >
                  $
                </span>
              </span>,
              <Connect(AddToCartButton)
                addItemToCartSuccess={[MockFunction]}
                item={
                  Object {
                    "brand": "randombrand",
                    "discreption": "randomdisc",
                    "title": "random",
                  }
                }
                options={
                  Object {
                    "color": "green",
                    "gender": "male",
                    "size": "l",
                  }
                }
              />,
            ],
            "className": "priceContainer",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  "Price: ",
                  <span
                    className="priceNumber"
                  >
                    $
                  </span>,
                ],
                "className": "price",
              },
              "ref": null,
              "rendered": Array [
                "Price: ",
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      "$",
                      undefined,
                    ],
                    "className": "priceNumber",
                  },
                  "ref": null,
                  "rendered": Array [
                    "$",
                    undefined,
                  ],
                  "type": "span",
                },
              ],
              "type": "span",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "addItemToCartSuccess": [MockFunction],
                "item": Object {
                  "brand": "randombrand",
                  "discreption": "randomdisc",
                  "title": "random",
                },
                "options": Object {
                  "color": "green",
                  "gender": "male",
                  "size": "l",
                },
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <p
              className="discreptionText"
            >
              randomdisc
            </p>,
            "className": "discreptionContainer",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "randomdisc",
              "className": "discreptionText",
            },
            "ref": null,
            "rendered": "randomdisc",
            "type": "p",
          },
          "type": "div",
        },
      ],
      "type": Symbol(react.fragment),
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
